components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin, manager]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

    Publisher:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string

    Book:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        availableQuantity:
          type: number
        isbn:
          type: string
        language:
          type: string
        totalPages:
          type: number
        price:
          type: number
        priceDiscount:
          type: number
        description:
          type: string
        publisherId:
          type: string
        publishedDate:
          type: string
          format: date-time
        images:
          type: string
        authors:
          type: string
        genres:
          type: string
        discounts:
          type: string
        reviews:
          type: string
        isDeleted:
          type: boolean
        hasDiscount:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        biography:
          type: string
        birthDate:
          type: string
          format: date-time
        deathDate:
          type: string
          format: date-time

    Genre:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    Profile:
      type: object
      properties:
        id:
          type: string
        biography:
          type: string
        avatar:
          type: string
        addresses:
          type: string
        userId:
          type: string
        discounts:
          type: string

    Province:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    City:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        provinceId:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Bad request
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
